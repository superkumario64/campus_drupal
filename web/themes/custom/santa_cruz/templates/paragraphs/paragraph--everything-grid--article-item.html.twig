{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_id,
  'paragraph--id--' ~ paragraph.id()|clean_id,
  'everything-item',
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_id,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

{% set link = content.field_link[0]['#url']|render %}

{% block paragraph %}
  <section{{ attributes.addClass(classes) }} aria-label="content row">
    {% block content %}
      <div class="news">
        <a href="{{ link }}" aria-label="">
          <div class="cube-content">
            <div class="cube-mask grid-y align-middle">
              <div class="copy large-auto">
                <div class="grid-x align-middle">
                  <p class="category cell">{{ content.field_pre_title }}</p>
                  <h4 class="cell">{{ content.field_title }}</h4>
                </div>
              </div>

              <div class="large-6 xlarge-7 xxlarge-6">
                <div class="image">
                  {% if content.field_image.0 %}
                    {% set image_url = file_url(content.field_image[0]['#media'].field_media_image.entity.uri.value|image_style('everything_grid_tile')) %}
                    {% set image_alt = content.field_image[0]['#media'].field_media_image.alt %}
                    <img alt="{{ image_alt }}" src="{{ image_url }}">
                  {% else %}
                    <img src="{{ base_path ~ directory }}/assets/img/content/everythinggrid-news.jpg">
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
          <div class="cube-actions sea-green">
            <div class="action">
              <h4>{{ content.field_link[0]['#title'] }}</h4>
              <p class="button clear white-text">Read the Story</p>
            </div>
          </div>
        </a>
      </div>
    {% endblock %}
  </section>
{% endblock paragraph %}
